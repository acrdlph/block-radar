{"ast":null,"code":"import _classCallCheck from \"/home/achill/Projects/aragon/block-radar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/achill/Projects/aragon/block-radar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/achill/Projects/aragon/block-radar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/achill/Projects/aragon/block-radar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/achill/Projects/aragon/block-radar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/achill/Projects/aragon/block-radar/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3'; // Three components: \n// 1: BlockBox for displaying block with relative size\n// 2: BlockDetails for displaying transactions with msg.value > 0\n// 3: TransactionDetails for displaying details about transaction\n\nimport BlockBox from '../components/BlockBox/BlockBox';\nimport BlockDetails from '../components/BlockDetails/BlockDetails';\nvar web3 = new Web3(Web3.givenProvider);\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      blocks: [],\n      activeBlock: null,\n      web3Connected: null\n    };\n\n    _this.getBlocks = function () {\n      var blocks = [];\n      web3.eth.getBlockNumber().then(function (latestBlockNumber) {\n        for (var i = 0; i < 10; i++) {\n          web3.eth.getBlock(latestBlockNumber - i).then(function (block) {\n            blocks.push({\n              blockNumber: block.number,\n              transactions: block.transactions,\n              transactionNumber: block.transactions.length\n            });\n\n            _this.setState({\n              blocks: blocks\n            });\n          }).catch(function (err) {\n            console.log(err);\n          });\n        }\n      }).then(function (blocks) {\n        _this.setState({\n          blocks: blocks\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    };\n\n    _this.selectBlock = function (blockNumber) {\n      // get selected/active block\n      var activeBlock = _this.state.blocks.filter(function (block) {\n        return block.blockNumber === blockNumber;\n      });\n\n      var filteredTransactions = [];\n      activeBlock[0].transactions.forEach(function (txHash) {\n        web3.eth.getTransaction(txHash).then(function (tx) {\n          if (tx.value > 0) {\n            filteredTransactions.push(tx);\n          }\n\n          _this.setState({\n            activeBlockTx: filteredTransactions\n          });\n        });\n      });\n\n      _this.setState({\n        activeBlock: activeBlock[0].blockNumber\n      });\n    };\n\n    _this.getNetwork = function () {\n      var networkName = '';\n      web3 && web3.currentProvider.publicConfigStore.on('update', function () {\n        web3.eth.net.getNetworkType().then(function (res) {\n          switch (res) {\n            case \"main\":\n              networkName = \"Ethereum Mainnet\";\n              break;\n\n            case \"morden\":\n              networkName = \"Morden Testnet\";\n              break;\n\n            case \"ropsten\":\n              networkName = \"Ropsten Testnet\";\n              break;\n\n            case \"rinkeby\":\n              networkName = \"Rinkeby Testnet\";\n              break;\n\n            case \"kovan\":\n              networkName = \"Kovan Testnet\";\n              break;\n\n            default:\n              networkName = \"Unknown\";\n          }\n\n          _this.setState({\n            web3Connected: networkName\n          });\n        }).catch(function (err) {\n          console.log(err);\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Identify which network the app is connected to:\n      this.getNetwork(); // get the blocks\n\n      this.getBlocks();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var blocks;\n      var totalTransactions = 0; // only render individual block components, once all blocks have been retrieved\n\n      if (this.state.blocks && this.state.blocks.length === 10) {\n        // get the number of total transactions across all 10 blocks in order to display relative block sizes\n        for (var i = 0; i < 10; i++) {\n          totalTransactions += this.state.blocks[i].transactionNumber;\n        }\n\n        blocks = this.state.blocks && this.state.blocks.map(function (block) {\n          return (// calculate the width of the box based on the relative transaction volume \n            // (percentage of #transactions in block relative to total #transactions across the 10 blocks)\n            React.createElement(BlockBox, {\n              key: block.blockNumber,\n              blockData: block,\n              width: Math.floor(block.transactionNumber / totalTransactions * 100),\n              selectBlock: _this2.selectBlock,\n              active: block.blockNumber === _this2.state.activeBlock,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133\n              },\n              __self: this\n            })\n          );\n        });\n      }\n\n      var connectionStatus = this.state.web3Connected ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Connected\"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), \" \", this.state.web3Connected) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \" No Web3\"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), \" Activate Metamask \");\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"network\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, connectionStatus), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"LAST 10 ETHEREUM BLOCKS\"), React.createElement(\"button\", {\n        onClick: this.getBlocks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Refresh\")), React.createElement(\"div\", {\n        className: \"Blocks\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, blocks), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(BlockDetails, {\n        blockNumber: this.state.activeBlock,\n        txDetails: this.state.activeBlockTx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/achill/Projects/aragon/block-radar/src/containers/App.js"],"names":["React","Component","Web3","BlockBox","BlockDetails","web3","givenProvider","App","state","blocks","activeBlock","web3Connected","getBlocks","eth","getBlockNumber","then","latestBlockNumber","i","getBlock","block","push","blockNumber","number","transactions","transactionNumber","length","setState","catch","err","console","log","selectBlock","filter","filteredTransactions","forEach","txHash","getTransaction","tx","value","activeBlockTx","getNetwork","networkName","currentProvider","publicConfigStore","on","net","getNetworkType","res","totalTransactions","map","Math","floor","connectionStatus"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\n\n// Three components: \n// 1: BlockBox for displaying block with relative size\n// 2: BlockDetails for displaying transactions with msg.value > 0\n// 3: TransactionDetails for displaying details about transaction\n\nimport BlockBox from '../components/BlockBox/BlockBox';\nimport BlockDetails from '../components/BlockDetails/BlockDetails';\n\n\nconst web3 = new Web3(Web3.givenProvider);\n\nclass App extends Component {\n\n  state = {\n    blocks: [],\n    activeBlock: null,\n    web3Connected: null\n  }\n\n  getBlocks = () => {\n    let blocks = [];\n    web3.eth.getBlockNumber()\n      .then(latestBlockNumber => {\n        for (let i = 0; i < 10; i++) {\n          web3.eth.getBlock(latestBlockNumber - i)\n            .then(block => {\n              blocks.push({\n                blockNumber: block.number,\n                transactions: block.transactions,\n                transactionNumber: block.transactions.length\n              })\n              this.setState({ blocks });\n            })\n            .catch(err => {\n              console.log(err);\n            });\n        }\n      })\n      .then(blocks => {\n        this.setState({ blocks });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  selectBlock = (blockNumber) => {\n    // get selected/active block\n    const activeBlock = this.state.blocks.filter(block => {\n      return block.blockNumber === blockNumber;\n    })\n\n    const filteredTransactions = [];\n\n    activeBlock[0].transactions.forEach(txHash => {\n      web3.eth.getTransaction(txHash)\n        .then(tx => {\n          if (tx.value > 0) {\n            filteredTransactions.push(tx);\n          }\n          this.setState({ activeBlockTx: filteredTransactions });\n        })\n    });\n    this.setState({\n      activeBlock: activeBlock[0].blockNumber,\n    });\n  }\n\n  componentDidMount() {\n    // Identify which network the app is connected to:\n    this.getNetwork()\n    // get the blocks\n    this.getBlocks();\n  }\n\n  getNetwork = () => {\n    let networkName = '';\n    web3 && web3.currentProvider.publicConfigStore.on('update', () => {\n      web3.eth.net.getNetworkType()\n        .then(res => {\n          switch (res) {\n            case \"main\":\n              networkName = \"Ethereum Mainnet\";\n              break;\n            case \"morden\":\n              networkName = \"Morden Testnet\";\n              break;\n            case \"ropsten\":\n              networkName = \"Ropsten Testnet\";\n              break;\n            case \"rinkeby\":\n              networkName = \"Rinkeby Testnet\";\n              break;\n            case \"kovan\":\n              networkName = \"Kovan Testnet\";\n              break;\n            default:\n              networkName = \"Unknown\";\n          }\n          this.setState({\n            web3Connected: networkName,\n          })\n        }\n        )\n        .catch(err => {\n          console.log(err);\n        })\n    });\n  }\n\n  componentDidUpdate() {\n  }\n\n  render() {\n\n    let blocks;\n    let totalTransactions = 0;\n\n    // only render individual block components, once all blocks have been retrieved\n    if (this.state.blocks && this.state.blocks.length === 10) {\n      // get the number of total transactions across all 10 blocks in order to display relative block sizes\n      for (let i = 0; i < 10; i++) {\n        totalTransactions += this.state.blocks[i].transactionNumber;\n      }\n      blocks = this.state.blocks && this.state.blocks.map(block => {\n        return (\n          // calculate the width of the box based on the relative transaction volume \n          // (percentage of #transactions in block relative to total #transactions across the 10 blocks)\n          <BlockBox\n            key={block.blockNumber}\n            blockData={block}\n            width={Math.floor((block.transactionNumber / totalTransactions) * 100)}\n            selectBlock={this.selectBlock}\n            active={block.blockNumber === this.state.activeBlock}\n          />\n\n        );\n      })\n    }\n\n    const connectionStatus = this.state.web3Connected\n      ? (<p><b>Connected</b> <br /> {this.state.web3Connected}</p>)\n      : (<p><b> No Web3</b> <br /> Activate Metamask </p>);\n\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"network\">\n            {/* Show connection status */}\n            {connectionStatus}\n          </div>\n          <p>\n            LAST 10 ETHEREUM BLOCKS\n          </p>\n          <button onClick={this.getBlocks}>Refresh</button>\n        </header>\n        <div className=\"Blocks\">\n          {blocks}\n        </div>\n        <div>\n          <BlockDetails\n            blockNumber={this.state.activeBlock}\n            txDetails={this.state.activeBlockTx} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}